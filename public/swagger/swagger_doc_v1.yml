swagger: "2.0"
info:
  description: "Documentation for Craftbeer APIs"
  version: "1.0.0"
  title: "Craftbeer APIs"
  contact:
    email: "vu.nguyen@codeenginestudio.com"
# host: "petstore.swagger.io"
basePath: "/api/v1"
tags:
- name: "admin_account"
  description: "Operations about account used by Admin"
- name: "admin_beer"
  description: "Operations about beer used by Admin"
- name: "admin_category"
  description: "Operations about category used by Admin"
- name: "authentication"
  description: "Operations about authentication"
- name: "customer_beer"
  description: "Operations about beer used by Customer"
- name: "guest_beer"
  description: "Operations about beer used by Guest"
- name: "chatroom"
  description: "Operations about chatroom"
- name: "message"
  description: "Operations about message"
schemes:
- "http"
- "https"
paths:
  /auth/sign_up:
    post:
      tags:
      - "authentication"
      summary: "Create new user"
      description: "Create new user"
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        description: "User object"
        required: true
        schema:
          $ref: "#/definitions/Account"
      responses:
        201:
          description: "Successful operation"
          schema:
            type: "object"
            $ref: "#/definitions/UserWithToken"
        402:
          description: "Validation failed"
  /auth/sign_in:
    post:
      tags:
      - "authentication"
      summary: "Sign in"
      description: "Sign in"
      operationId: "signIn"
      produces:
      - "application/json"
      parameters:
      - name: "user"
        in: "body"
        description: "User's email and password"
        required: true
        schema:
          $ref: "#/definitions/UserSignIn"
      responses:
        201:
          description: "Successful operation"
          schema:
            type: "object"
            $ref: "#/definitions/UserWithToken"
        404:
          description: "Wrong email or password"

  /admin_account/new_admin:
    post:
      tags:
      - "admin_account"
      summary: "Create new admin account"
      description: "Create new admin account"
      operationId: "adminCreateNewAdminAccount"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Admin token"
        required: true
        type: "string"
      - name: "body"
        in: "body"
        description: "Account object"
        required: true
        schema:
          $ref: "#/definitions/Account"
      responses:
        201:
          description: "Successful operation"
          schema:
            type: "object"
            $ref: "#/definitions/User"
        401:
          description: "Unauthorized"

  /admin_beer:
    get:
      tags:
      - "admin_beer"
      summary: "Return all beers"
      description: "Return all beers"
      operationId: "adminGetBeers"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Admin token"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Beer"
        401:
          description: "Unauthorized"
  /admin_beer/{id}:
    get:
      tags:
      - "admin_beer"
      summary: "Return a beer"
      description: "Return a beer"
      operationId: "adminGetABeer"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Admin token"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "Beer id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            $ref: "#/definitions/Beer"
        401:
          description: "Unauthorized"
        404:
          description: "Couldn't find Beer"
  /admin_beer/create:
    post:
      tags:
      - "admin_beer"
      summary: "Create a beer"
      description: "Create a beer"
      operationId: "adminCreateABeer"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Admin token"
        required: true
        type: "string"
      - name: "body"
        in: "body"
        description: "Beer object"
        required: true
        schema:
          $ref: "#/definitions/BeerRequest"
      responses:
        201:
          description: "successful operation"
          schema:
            type: "object"
            $ref: "#/definitions/Beer"
        401:
          description: "Unauthorized"
        402:
          description: "Validation failed"
  /admin_beer/edit/{id}:
    put:
      tags:
      - "admin_beer"
      summary: "Edit a beer"
      description: "Edit a beer"
      operationId: "adminEditABeer"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Admin token"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "Beer id"
        required: true
        type: "integer"
        format: "int64"
      - name: "body"
        in: "body"
        description: "Beer object"
        required: true
        schema:
          $ref: "#/definitions/BeerRequest"
      responses:
        201:
          description: "successful operation"
          schema:
            type: "object"
            $ref: "#/definitions/Beer"
        401:
          description: "Unauthorized"
        402:
          description: "Validation failed"
        404:
          description: "Could not find Beer"
  /admin_beer/archive/{id}:
    put:
      tags:
      - "admin_beer"
      summary: "Archive a beer"
      description: "Archive a beer"
      operationId: "adminArchiveABeer"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Beer id"
        required: true
        type: "integer"
        format: "int64"
      - name: "token"
        in: "query"
        description: "Admin token"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
        401:
          description: "Unauthorized"
        404:
          description: "Could not find Beer"
  /admin_beer/unarchive/{id}:
    put:
      tags:
      - "admin_beer"
      summary: "Unarchive a beer"
      description: "Unarchive a beer"
      operationId: "adminUnarchiveABeer"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Beer id"
        required: true
        type: "integer"
        format: "int64"
      - name: "token"
        in: "query"
        description: "Admin token"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
        401:
          description: "Unauthorized"
        404:
          description: "Could not find Beer"

  /admin_category:
    get:
      tags:
      - "admin_category"
      summary: "Return all beer categories"
      description: "Return all beer categories"
      operationId: "adminGetCategories"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Admin token"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Category"
        401:
          description: "Unauthorized"
  /admin_category/create:
    post:
      tags:
      - "admin_category"
      summary: "Create new beer category"
      description: "Create new beer category"
      operationId: "adminCreateACategory"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Admin token"
        required: true
        type: "string"
      - name: "body"
        in: "body"
        description: "Category object"
        required: true
        schema:
          $ref: "#/definitions/CategoryRequest"
      responses:
        201:
          description: "Successful operation"
          schema:
            type: "object"
            $ref: "#/definitions/Category"
        401:
          description: "Unauthorized"
        402:
          description: "Validation failed"
  /admin_category/{id}:
    delete:
      tags:
      - "admin_category"
      summary: "Delete a beer category"
      description: "Delete a beer category"
      operationId: "adminDeleteACategory"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Category id"
        required: true
        type: "integer"
        format: "int64"
      - name: "token"
        in: "query"
        description: "Admin token"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "object"
            $ref: "#/definitions/Category"
        401:
          description: "Unauthorized"
        402:
          description: "Validation failed"

  /customer_beer:
    get:
      tags:
      - "customer_beer"
      summary: "Return all customer beers"
      description: "Return all customer beers"
      operationId: "customerGetBeers"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Customer token"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "object"
            $ref: "#/definitions/CustomerBeer"
        401:
          description: "Unauthorized"
  /customer_beer/consume/{beer_id}:
    post:
      tags:
      - "customer_beer"
      summary: "Consume a beer"
      description: "Consume a beer"
      operationId: "customerConsumeBeer"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Customer token"
        required: true
        type: "string"
      - name: "beer_id"
        in: "path"
        description: "Beer id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        201:
          description: "Successful operation"
          schema:
            type: "object"
            $ref: "#/definitions/Passport"
        401:
          description: "Unauthorized"
        404:
          description: "Can not find Beer"

  /guest_beer:
    get:
      tags:
      - "guest_beer"
      summary: "Return all available beers"
      description: "Return all available beers"
      operationId: "getAvailableBeers"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Beer"

  /chatroom/create:
    post:
      tags:
      - "chatroom"
      summary: "Create a chatroom"
      description: "Create a chatroom"
      operationId: "createChatroom"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/ChatroomRequest"
      responses:
        201:
          description: "Successful operation"
          schema:
            type: "boolean"
  /chatroom/{user_id}:
    get:
      tags:
      - "chatroom"
      summary: "Get all chatrooms that user is joining in"
      description: "Get all chatrooms that user is joining in"
      operationId: "getChatrooms"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        description: "User id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Chatroom"

  /message/create:
    post:
      tags:
      - "message"
      summary: "Create message in Chatroom"
      description: "Create message in Chatroom"
      operationId: "createMessage"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        description: "Message object"
        required: true
        schema:
          $ref: "#/definitions/MessageRequest"
      responses:
        201:
          description: "Successful operation"
          schema:
            type: "object"
            $ref: "#/definitions/Message"
  /message/{chatroom_id}:
    get:
      tags:
      - "message"
      summary: "Get all messages in Chatroom"
      description: "Get all messages in Chatroom"
      operationId: "getMessages"
      produces:
      - "application/json"
      parameters:
      - name: "chatroom_id"
        in: "path"
        description: "Chatroom id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Message"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      email:
        type: "string"
      role:
        type: "integer"
        format: "int64"
  Account:
    type: "object"
    properties:
      account:
        type: "object"
        properties:
          name:
            type: "string"
          email:
            type: "string"
          password:
            type: "string"
            format: "password"
  UserWithToken:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      role:
        type: "integer"
        format: "int64"
      token:
        type: "string"
  UserSignIn:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
        format: "password"
  Beer:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      manufacturer:
        type: "string"
      name:
        type: "string"
      country:
        type: "string"
      price:
        type: "number"
        format: "float"
      description:
        type: "string"
      is_archived:
        type: "boolean"
      category:
        type: "object"
        $ref: "#/definitions/Category"
    xml:
      name: "Beer"
  BeerRequest:
    type: "object"
    properties:
      beer:
        type: "object"
        properties:
          manufacturer:
            type: "string"
          name:
            type: "string"
          country:
            type: "string"
          price:
            type: "number"
            format: "double"
          description:
            type: "string"
          category_id:
            type: "integer"
            format: "int64"
    xml:
      name: "BeerRequest"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  CategoryRequest:
    type: "object"
    properties:
      category:
        type: "object"
        properties:
          name:
            type: "string"

  CustomerBeer:
    type: "object"
    properties:
      passport:
        $ref: "#/definitions/Passport"
      available_beers:
        type: "array"
        items:
          $ref: "#/definitions/Beer"
  Passport:
    type: "array"
    items:
      $ref: "#/definitions/Beer"

  ChatroomRequest:
    type: "object"
    properties:
      participants:
        type: "string"

  Chatroom:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      users:
        type: "array"
        items:
          $ref: "#/definitions/User"

  MessageRequest:
    type: "object"
    properties:
      message:
        type: "object"
        properties:
          content:
            type: "string"
          chatroom_id:
            type: "integer"
            format: "int64"
          user_id:
            type: "integer"
            format: "int64"

  Message:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      content:
        type: "string"
      chatroom:
        type: "integer"
        format: "int64"
      user:
        type: "object"
        $ref: "#/definitions/User"
      created_at:
        type: "string"
        format: "date-time"
      updated_at:
        type: "string"
        format: "date-time"
